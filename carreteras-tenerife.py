# --------------------------- #
#      1. Importaciones        #
# --------------------------- #

import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static
import geopandas as gpd
import seaborn as sns
import matplotlib.pyplot as plt
import gdown
import datetime
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
import numpy as np
import plotly.graph_objects as go
from io import BytesIO
import requests
import osmnx as ox
import streamlit.components.v1 as components
from dotenv import load_dotenv
import os
import plotly.graph_objects as go
from datetime import datetime
import locale
# --------------------------- #
# 2. Cargar Variables de Entorno #
# --------------------------- #

# Cargar variables de entorno desde .env
load_dotenv()

# Obtener la clave de API de Google desde las variables de entorno
API_KEY_GOOGLE = st.secrets["GOOGLE_API_KEY"]


if not API_KEY_GOOGLE:
    st.error("‚ö†Ô∏è La clave de API de Google no est√° configurada. Por favor, establece la variable de entorno 'GOOGLE_API_KEY'.")
    st.stop()

# --------------------------- #
#     3. Configuraci√≥n P√°gina    #
# --------------------------- #


# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="üöó An√°lisis de Accidentes en Carreteras", layout="wide")

# --------------------------- #
#      INTRODUCCI√ìN E INSTRUCCIONES #
# --------------------------- #

# üöó An√°lisis y Predicci√≥n de Accidentes en Carreteras de Tenerife

st.markdown("""
# üöó An√°lisis y Predicci√≥n de Accidentes en Carreteras de Tenerife

Esta aplicaci√≥n interactiva te permite analizar accidentes de tr√°fico en las carreteras de Tenerife entre **2010 y 2024**. Utiliza datos hist√≥ricos y tecnolog√≠a avanzada para visualizar mapas, obtener informaci√≥n en tiempo real sobre el tr√°fico, y predecir la probabilidad de accidentes en diferentes tramos de carretera.
""")

# Desplegable para las caracter√≠sticas principales
with st.expander("üîç Caracter√≠sticas principales"):
    st.markdown("""
    - **An√°lisis de accidentes**: Explora los accidentes de tr√°fico por carretera, hora del d√≠a, d√≠a de la semana, y m√°s.
    - **Predicci√≥n en tiempo real**: Obt√©n una predicci√≥n sobre la probabilidad de que ocurra un accidente en las condiciones actuales.
    - **Visualizaci√≥n de tr√°fico en tiempo real**: Muestra el tr√°fico actual en las carreteras seleccionadas usando Google Maps.
    """)

# Desplegable para la barra lateral de filtros
with st.expander("üìä C√≥mo usar la aplicaci√≥n"):
    st.markdown("""
    ### Filtros en la barra lateral:
    1. **üìÖ Selecci√≥n de a√±os**: 
       - Usa el control deslizante para seleccionar el rango de a√±os que te interesa analizar. 
       - El valor predeterminado incluye todos los a√±os disponibles, pero puedes ajustar el rango a tu gusto.

    2. **üõ£Ô∏è Selecci√≥n de carreteras**: 
       - Puedes seleccionar una o varias carreteras para analizar accidentes en esas zonas. Si seleccionas "Seleccionar Todas", ver√°s los datos de todas las carreteras disponibles.

    3. **‚è∞ Filtrar por hora del d√≠a**: 
       - Puedes ajustar el an√°lisis para ver accidentes que ocurrieron en un rango de horas espec√≠fico del d√≠a. Esto es √∫til si quieres analizar solo las horas pico o un periodo en particular.
       
    Los filtros que seleccionas aqu√≠ determinar√°n los resultados que ver√°s en las siguientes secciones de gr√°ficos y mapas.
    """)

# Desplegable para la secci√≥n de mapas
with st.expander("üó∫Ô∏è Secci√≥n de Mapas"):
    st.markdown("""
    ### 1. Mapa de tr√°fico en tiempo real:
    - En esta secci√≥n, puedes visualizar el tr√°fico actual en las carreteras de Tenerife gracias a la integraci√≥n con Google Maps. 
    - El mapa te muestra en tiempo real d√≥nde hay m√°s tr√°fico, con una leyenda que indica el nivel de tr√°fico.

    ### 2. Mapa interactivo de carreteras seleccionadas:
    - Este mapa muestra las carreteras que seleccionaste en la barra lateral de forma gr√°fica.

# Desplegable para la secci√≥n de gr√°ficos
with st.expander("üìä Secci√≥n de Gr√°ficos"):
    st.markdown("""
    ### C√≥mo funciona la secci√≥n de gr√°ficos:
    - Despu√©s de aplicar los filtros en la barra lateral (a√±os, carreteras y horas), los gr√°ficos te mostrar√°n un an√°lisis detallado sobre los accidentes filtrados.
    - Los gr√°ficos incluir√°n informaci√≥n como:
      - **Accidentes por tramo**: Muestra los tramos con m√°s accidentes en las carreteras seleccionadas.
      - **Accidentes por hora del d√≠a**: Te permite ver en qu√© horas del d√≠a ocurren m√°s accidentes.
      - **Accidentes por d√≠a de la semana**: Muestra los d√≠as de la semana con m√°s accidentes.
      - **Accidentes por mes**: Analiza c√≥mo var√≠a la siniestralidad a lo largo del a√±o.

    ### Qu√© hacer en esta secci√≥n:
    - Una vez aplicados los filtros, los gr√°ficos se actualizar√°n autom√°ticamente.
    - Cada gr√°fico proporciona insights clave, por ejemplo:
      - **¬øA qu√© horas ocurren m√°s accidentes?**
      - **¬øCu√°les son los d√≠as m√°s peligrosos en las carreteras seleccionadas?**
    - Puedes utilizar esta informaci√≥n para identificar patrones y tendencias.

    ### Descarga de informes:
    - Todos los gr√°ficos que se generan se pueden descargar en formato PNG, lo cual es √∫til para crear informes o presentaciones.
    """)

# Desplegable para la secci√≥n de predicci√≥n
with st.expander("üîÆ Secci√≥n de Predicci√≥n"):
    st.markdown("""
    ### Predicci√≥n de accidentes:
    - La aplicaci√≥n te ofrece una estimaci√≥n de la probabilidad de que ocurra un accidente en tiempo real. Esta predicci√≥n se basa en datos hist√≥ricos y factores como el d√≠a de la semana, la hora, y el tramo de carretera que seleccionaste.

    ### C√≥mo funciona:
    - Selecciona una carretera y un tramo en la barra lateral, y la aplicaci√≥n calcular√° la probabilidad de que ocurra un accidente bajo las condiciones actuales (hora y d√≠a).
    
    ### Bar√≥metro de riesgo:
    - La predicci√≥n se muestra visualmente como un bar√≥metro, indicando si el riesgo de accidente es bajo (verde), moderado (naranja), o alto (rojo).
    """)


# --------------------------- #
#     4. Cargar Datos           #
# --------------------------- #

@st.cache_data
def load_data():
    file_id = '1R4dx-DCwZ29fNvdsT-JHorZPc3LnfT0p'  # ID del archivo en Google Drive
    url = f'https://drive.google.com/uc?id={file_id}'
    output = 'incidencias_full_limpio.csv'
    if not os.path.exists(output):
        gdown.download(url, output, quiet=False)
    df = pd.read_csv(output)
    df['incidencia_fecha_inicio'] = pd.to_datetime(df['incidencia_fecha_inicio'])
    df['hora'] = df['incidencia_fecha_inicio'].dt.hour
    df['dia_semana'] = df['incidencia_fecha_inicio'].dt.dayofweek
    df['mes'] = df['incidencia_fecha_inicio'].dt.month
    return df

df = load_data()

# --------------------------- #
#     5. Definici√≥n Funciones    #
# --------------------------- #

# Funci√≥n para obtener coordenadas a partir de un nombre o direcci√≥n usando la API de Geocoding
def obtener_coordenadas_lugar(lugar, api_key):
    url = f"https://maps.googleapis.com/maps/api/geocode/json"
    params = {'address': lugar, 'key': api_key}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        if len(data['results']) > 0:
            lat = data['results'][0]['geometry']['location']['lat']
            lon = data['results'][0]['geometry']['location']['lng']
            return f"{lat},{lon}"
        else:
            st.error(f"No se encontr√≥ el lugar: {lugar}")
            return None
    else:
        st.error(f"Error al obtener coordenadas: {response.status_code}")
        return None

# Funci√≥n para obtener la ruta desde Google Maps Directions API
def obtener_ruta_google_maps(origen, destino, api_key):
    url = f"https://maps.googleapis.com/maps/api/directions/json"
    params = {
        'origin': origen,
        'destination': destino,
        'key': api_key,
        'departure_time': 'now',
        'traffic_model': 'best_guess',
        'mode': 'driving'
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Error al obtener la ruta: {response.status_code}")
        return None

# Funci√≥n para mostrar la ruta en el mapa y datos de tr√°fico
def mostrar_ruta_en_mapa_con_trafico(ruta):
    if ruta and 'routes' in ruta and len(ruta['routes']) > 0:
        tiempo_sin_trafico = ruta['routes'][0]['legs'][0]['duration']['value'] / 60
        tiempo_con_trafico = ruta['routes'][0]['legs'][0]['duration_in_traffic']['value'] / 60
        retraso = tiempo_con_trafico - tiempo_sin_trafico

        st.subheader("üìä Datos de Tr√°fico")
        st.write(f"Tiempo estimado sin tr√°fico: **{tiempo_sin_trafico:.2f} minutos**")
        st.write(f"Tiempo estimado con tr√°fico: **{tiempo_con_trafico:.2f} minutos**")
        st.write(f"Retraso estimado debido al tr√°fico: **{retraso:.2f} minutos**")

        start_location = ruta['routes'][0]['legs'][0]['start_location']
        mapa = folium.Map(location=[start_location['lat'], start_location['lng']], zoom_start=13)

        points = []
        for step in ruta['routes'][0]['legs'][0]['steps']:
            lat = step['start_location']['lat']
            lng = step['start_location']['lng']
            points.append([lat, lng])

        folium.PolyLine(points, color="blue", weight=5, opacity=0.8).add_to(mapa)
        return mapa
    else:
        st.warning("No se encontr√≥ una ruta v√°lida.")
        return None



# --------------------------- #
#        6. Mapa de Tr√°fico     #
# --------------------------- #


# T√≠tulo de la secci√≥n del mapa
st.title("üìç Google Maps con Tr√°fico en Tiempo Real")

# Obtener la API Key desde los secretos
api_key = st.secrets["GOOGLE_API_KEY"]

# Verificar que la API Key est√© configurada
if not api_key:
    st.error("‚ö†Ô∏è La clave de API de Google no est√° configurada. Por favor, establece la variable de entorno 'GOOGLE_API_KEY'.")
    st.stop()

# HTML din√°mico con la API Key inyectada
html_content = f"""
<!DOCTYPE html>
<html>
  <head>
    <title>Google Maps con Tr√°fico en Tiempo Real</title>
    <script src="https://maps.googleapis.com/maps/api/js?key={api_key}&callback=initMap" async defer></script>
    <style>
      /* Estilo para la leyenda */
      .legend {{
        background: white;
        padding: 10px;
        margin: 10px;
        border-radius: 5px;
        font-family: Arial, sans-serif;
        font-size: 12px;
      }}
      .legend div {{
        display: flex;
        align-items: center;
        margin-bottom: 5px;
      }}
      .color-box {{
        width: 20px;
        height: 20px;
        margin-right: 5px;
      }}
      .green {{
        background-color: green;
      }}
      .yellow {{
        background-color: yellow;
      }}
      .red {{
        background-color: red;
      }}
    </style>
    <script>
      function initMap() {{
        var mapOptions = {{
          zoom: 8,
          center: {{ lat: 28.3000, lng: -16.5000 }}
        }};
        var map = new google.maps.Map(document.getElementById('map'), mapOptions);

        // A√±adir la capa de tr√°fico
        var trafficLayer = new google.maps.TrafficLayer();
        trafficLayer.setMap(map);

        // Crear la leyenda manualmente
        var legend = document.createElement('div');
        legend.innerHTML = `
          <div class="legend">
            <div><div class="color-box green"></div>Tr√°fico Fluido</div>
            <div><div class="color-box yellow"></div>Tr√°fico Moderado</div>
            <div><div class="color-box red"></div>Tr√°fico Denso</div>
          </div>
        `;

        // Colocar la leyenda en la parte inferior derecha
        map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend);
      }}
    </script>
  </head>
  <body>
    <div id="map" style="height: 600px; width: 100%;"></div>
  </body>
</html>
"""

# Renderizar el contenido HTML en Streamlit
components.html(html_content, height=600, scrolling=True)


# --------------------------- #
#      7. Procesamiento Datos  #
# --------------------------- #



# --------------------------- #
# 8. An√°lisis y Predicci√≥n      #
# --------------------------- #

# Filtros en la barra lateral
st.sidebar.header("üîé Filtros")

# Subt√≠tulo y descripci√≥n para el filtro de a√±os
st.sidebar.subheader("üìÖ Rango de A√±os")
st.sidebar.markdown("Selecciona el rango de a√±os que deseas analizar.")
min_year = int(df['annio'].min())
max_year = int(df['annio'].max())
a√±os = st.sidebar.slider("Selecciona el Rango de A√±os", min_year, max_year, (min_year, max_year))

# Separador para organizar los filtros
st.sidebar.markdown("---")

# Subt√≠tulo y filtro para seleccionar carreteras
st.sidebar.subheader("üõ£Ô∏è Selecci√≥n de Carreteras")
st.sidebar.markdown("Elige una o varias carreteras para filtrar los datos.")
carreteras_disponibles = df['carretera_nombre'].unique().tolist()
carreteras_disponibles.insert(0, "Seleccionar Todas")
carreteras_seleccionadas = st.sidebar.multiselect(
    "Carreteras",
    carreteras_disponibles,
    default=["Seleccionar Todas"]
)

# Separador
st.sidebar.markdown("---")

# Subt√≠tulo y descripci√≥n para el filtro de horas
st.sidebar.subheader("‚è∞ Hora del D√≠a")
st.sidebar.markdown("Filtra los datos seg√∫n la hora del d√≠a en la que ocurrieron los incidentes.")
hora = st.sidebar.slider("Selecciona la Hora del D√≠a", 0, 23, (0, 23))

# Separador
st.sidebar.markdown("---")

# Filtrar el dataframe por a√±os, carreteras y hora seleccionados
if "Seleccionar Todas" in carreteras_seleccionadas:
    carreteras_seleccionadas = df['carretera_nombre'].unique().tolist()

df_filtrado = df[
    (df['annio'] >= a√±os[0]) & (df['annio'] <= a√±os[1]) &
    (df['carretera_nombre'].isin(carreteras_seleccionadas)) &
    (df['hora'] >= hora[0]) & (df['hora'] <= hora[1])
]

# Filtrar solo los accidentes
df_filtrado_accidentes = df_filtrado[df_filtrado['es_accidente'] == 'Accidente']

# Lista para almacenar los insights
insights = []

# Configuraci√≥n global del estilo del gr√°fico
sns.set_style("darkgrid")
plt.style.use("dark_background")

# --------------------------- #
#          9. Gr√°ficos        #
# --------------------------- #

def crear_grafico_1(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 1: N√∫mero de Accidentes por Tramo"""
    st.header("üîù 1. N√∫mero de Accidentes en las Carreteras Seleccionadas")
    
    accidentes_por_tramo = df_filtrado_accidentes['tramo_nombre'].value_counts().head(10)
    
    if accidentes_por_tramo.empty:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
        plt.figure(figsize=(10, 6))
        plt.text(0.5, 0.5, 'No hay suficientes datos', horizontalalignment='center', verticalalignment='center', fontsize=12, color='white')
        plt.xticks([])
        plt.yticks([])
        plt.title("üöß Top 10 Tramos de Carretera con M√°s Accidentes")
        plt.tight_layout()
        st.pyplot(plt)
    else:
        plt.figure(figsize=(10, 6))
        sns.barplot(x=accidentes_por_tramo.values, y=accidentes_por_tramo.index, palette="Blues_r")
        plt.title("üöß Top 10 Tramos de Carretera con M√°s Accidentes")
        plt.xlabel("N√∫mero de Accidentes")
        plt.ylabel("Tramo")
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_accidentes_por_tramo.png",
            mime="image/png"
        )
        
        # Tabla con detalles de los Top 10 Tramos (ahora desplegable)
        with st.expander("üìã Ver detalles de Top 10 Tramos de Carretera con M√°s Accidentes"):
            top_tramos_df = accidentes_por_tramo.reset_index()
            top_tramos_df.columns = ['Tramo', 'N√∫mero de Accidentes']
            top_tramos_df['Porcentaje (%)'] = (top_tramos_df['N√∫mero de Accidentes'] / total_accidentes_filtrado) * 100
            st.table(top_tramos_df.style.format({'Porcentaje (%)': '{:.2f}%'}))
        
        # Insight
        top_tramo = accidentes_por_tramo.index[0]
        top_accidentes = accidentes_por_tramo.iloc[0]
        porcentaje_top_tramo = (top_accidentes / total_accidentes_filtrado) * 100
        insight_1 = f"""
        ### üí° Insight 1: Tramo con Mayor N√∫mero de Accidentes
        El tramo con m√°s accidentes es **{top_tramo}**, con **{top_accidentes} accidentes**, lo que representa un **{porcentaje_top_tramo:.2f}%** del total de accidentes en el rango seleccionado.
        """
        st.markdown(insight_1)
        insights.append(insight_1)


def crear_grafico_2(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 2: Distribuci√≥n de Accidentes por Hora del D√≠a"""
    st.header("‚è±Ô∏è 2. Distribuci√≥n de Accidentes por Hora del D√≠a")
    
    accidentes_por_hora = df_filtrado_accidentes['hora'].value_counts().sort_index()
    todas_las_horas = pd.DataFrame({'hora': range(24)})
    accidentes_por_hora_df = accidentes_por_hora.reset_index()
    accidentes_por_hora_df.columns = ['hora', 'numero_accidentes']
    accidentes_por_hora_df = todas_las_horas.merge(accidentes_por_hora_df, how='left', on='hora')
    accidentes_por_hora_df['numero_accidentes'] = accidentes_por_hora_df['numero_accidentes'].fillna(0).astype(int)
    
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='hora', y='numero_accidentes', data=accidentes_por_hora_df, marker='o', color="skyblue")
    plt.title("‚è∞ Accidentes por Hora del D√≠a")
    plt.xlabel("Hora del D√≠a")
    plt.ylabel("N√∫mero de Accidentes")
    plt.xticks(range(24))
    plt.grid(True)
    plt.tight_layout()
    st.pyplot(plt)
    
    # Bot√≥n de descarga del gr√°fico
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    st.download_button(
        label="üíæ Descargar gr√°fico",
        data=buf,
        file_name="grafico_accidentes_por_hora.png",
        mime="image/png"
    )
    
    # Tabla con detalles de accidentes por hora (ahora desplegable)
    with st.expander("üìã Ver detalles de Accidentes por Hora del D√≠a"):
        st.table(accidentes_por_hora_df.rename(columns={'numero_accidentes': 'N√∫mero de Accidentes'}).style.format({'N√∫mero de Accidentes': '{:d}'}))
    
    # Insight
    hora_pico = accidentes_por_hora_df.loc[accidentes_por_hora_df['numero_accidentes'].idxmax(), 'hora']
    num_accidentes_hora = accidentes_por_hora_df['numero_accidentes'].max()
    porcentaje_hora_pico = (num_accidentes_hora / total_accidentes_filtrado) * 100
    insight_2 = f"""
    ### üí° Insight 2: Hora Pico de Accidentes
    La hora con m√°s accidentes es a las **{hora_pico}:00 horas**, con **{num_accidentes_hora} accidentes**, representando un **{porcentaje_hora_pico:.2f}%** del total de accidentes. Este pico horario puede indicar mayor tr√°fico.
    """
    st.markdown(insight_2)
    insights.append(insight_2)


def crear_grafico_3(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 3: Correlaci√≥n entre D√≠a de la Semana y N√∫mero de Accidentes"""
    st.header("üìÖ 3. Correlaci√≥n entre D√≠a de la Semana y N√∫mero de Accidentes")
    correlacion_df = df_filtrado_accidentes.groupby('dia_semana').size().reset_index(name='accidentes')
    
    dias_semana_nombres = ['Lun', 'Mar', 'Mi√©', 'Jue', 'Vie', 'S√°b', 'Dom']
    
    if correlacion_df.empty:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
    else:
        plt.figure(figsize=(10, 6))
        sns.regplot(x='dia_semana', y='accidentes', data=correlacion_df, scatter_kws={'s':50}, line_kws={'color':'blue'})
        plt.title('üìä Correlaci√≥n entre D√≠a de la Semana y N√∫mero de Accidentes')
        plt.xlabel('D√≠a de la Semana')
        plt.ylabel('N√∫mero de Accidentes')
        plt.xticks(ticks=correlacion_df['dia_semana'], labels=dias_semana_nombres, rotation=45)
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_correlacion_dia_semana_accidentes.png",
            mime="image/png"
        )
        
        # Tabla con detalles de accidentes por d√≠a de la semana (ahora desplegable)
        with st.expander("üìã Ver detalles de Accidentes por D√≠a de la Semana"):
            correlacion_df_display = correlacion_df.copy()
            correlacion_df_display['D√≠a de la Semana'] = correlacion_df_display['dia_semana'].apply(lambda x: dias_semana_nombres[x])
            correlacion_df_display = correlacion_df_display.rename(columns={'accidentes': 'N√∫mero de Accidentes'})
            correlacion_df_display['Porcentaje (%)'] = (correlacion_df_display['N√∫mero de Accidentes'] / total_accidentes_filtrado) * 100
            st.table(correlacion_df_display[['D√≠a de la Semana', 'N√∫mero de Accidentes', 'Porcentaje (%)']].style.format({'Porcentaje (%)': '{:.2f}%'}))
        
        # Insight
        dia_semana_pico = correlacion_df_display.loc[correlacion_df_display['N√∫mero de Accidentes'].idxmax(), 'dia_semana']
        dia_semana_nombre = dias_semana_nombres[dia_semana_pico]
        num_accidentes_dia = correlacion_df_display['N√∫mero de Accidentes'].max()
        porcentaje_dia_pico = (num_accidentes_dia / total_accidentes_filtrado) * 100
        
        insight_3 = f"""
        ### üí° Insight 3: D√≠a con M√°s Accidentes
        El d√≠a con m√°s accidentes es el **{dia_semana_nombre}**, con **{num_accidentes_dia} accidentes**, representando un **{porcentaje_dia_pico:.2f}%** del total de accidentes. Esto sugiere que los **{dia_semana_nombre}** tienen una mayor siniestralidad.
        """
        st.markdown(insight_3)
        insights.append(insight_3)


def crear_grafico_4(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 4: Correlaci√≥n entre Mes y N√∫mero de Accidentes"""
    st.header("üìÜ 4. Correlaci√≥n entre Mes y N√∫mero de Accidentes")
    correlacion_df_mes = df_filtrado_accidentes.groupby('mes').size().reset_index(name='accidentes')
    
    meses_nombres = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 
                    'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
    
    if correlacion_df_mes.empty:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
    else:
        plt.figure(figsize=(10, 6))
        sns.regplot(x='mes', y='accidentes', data=correlacion_df_mes, scatter_kws={'s':50}, line_kws={'color':'blue'})
        plt.title('üìà Correlaci√≥n entre Mes y N√∫mero de Accidentes')
        plt.xlabel('Mes')
        plt.ylabel('N√∫mero de Accidentes')
        plt.xticks(ticks=correlacion_df_mes['mes'], labels=meses_nombres, rotation=45)
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_correlacion_mes_accidentes.png",
            mime="image/png"
        )
        
        # Tabla con detalles de accidentes por mes (ahora desplegable)
        with st.expander("üìã Ver detalles de Accidentes por Mes"):
            correlacion_df_mes_display = correlacion_df_mes.copy()
            correlacion_df_mes_display['Mes'] = correlacion_df_mes_display['mes'].apply(lambda x: meses_nombres[x-1])
            correlacion_df_mes_display = correlacion_df_mes_display.rename(columns={'accidentes': 'N√∫mero de Accidentes'})
            correlacion_df_mes_display['Porcentaje (%)'] = (correlacion_df_mes_display['N√∫mero de Accidentes'] / total_accidentes_filtrado) * 100
            st.table(correlacion_df_mes_display[['Mes', 'N√∫mero de Accidentes', 'Porcentaje (%)']].style.format({'Porcentaje (%)': '{:.2f}%'}))
        
        # Insight
        mes_pico = correlacion_df_mes_display.loc[correlacion_df_mes_display['N√∫mero de Accidentes'].idxmax(), 'mes']
        mes_nombre = meses_nombres[int(mes_pico) - 1]
        num_accidentes_mes = correlacion_df_mes_display['N√∫mero de Accidentes'].max()
        porcentaje_mes_pico = (num_accidentes_mes / total_accidentes_filtrado) * 100
        
        insight_4 = f"""
        ### üí° Insight 4: Mes con M√°s Accidentes
        El mes con m√°s accidentes es **{mes_nombre}**, con **{num_accidentes_mes} accidentes**, representando un **{porcentaje_mes_pico:.2f}%** del total de accidentes. Esto podr√≠a estar relacionado con condiciones clim√°ticas o aumento de tr√°fico en ese mes.
        """
        st.markdown(insight_4)
        insights.append(insight_4)


def crear_grafico_5(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 5: Mapa de Calor de Accidentes por D√≠a de la Semana y Hora"""
    st.header("üî• 5. Mapa de Calor: Accidentes por D√≠a de la Semana y Hora del D√≠a")
    heatmap_data = df_filtrado_accidentes.groupby(['dia_semana', 'hora']).size().unstack()
    
    dias_semana_nombres = ['Lun', 'Mar', 'Mi√©', 'Jue', 'Vie', 'S√°b', 'Dom']
    
    if heatmap_data.empty or heatmap_data.shape[1] == 0:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el mapa de calor.")
    else:
        plt.figure(figsize=(12, 6))
        sns.heatmap(heatmap_data, cmap="Blues_r", annot=True, fmt=".0f")
        plt.title("üå°Ô∏è Accidentes por D√≠a de la Semana y Hora del D√≠a")
        plt.xlabel("Hora del D√≠a")
        plt.ylabel("D√≠a de la Semana")
        plt.yticks(ticks=[0,1,2,3,4,5,6], labels=dias_semana_nombres, rotation=0)
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_mapa_calor_accidentes.png",
            mime="image/png"
        )
        
        # Tabla con detalles de accidentes por d√≠a y hora (ahora desplegable)
        with st.expander("üìã Ver detalles de Accidentes por D√≠a de la Semana y Hora del D√≠a"):
            heatmap_display_df = heatmap_data.copy()
            heatmap_display_df.index = heatmap_display_df.index.map(lambda x: dias_semana_nombres[x])
            heatmap_display_df.columns = [f"{hora}:00" for hora in heatmap_display_df.columns]
            st.table(heatmap_display_df.style.format("{:.0f}"))
        
        # Insight
        if heatmap_data.values.max() > 0:
            max_value = heatmap_data.values.max()
            max_indices = np.where(heatmap_data.values == max_value)
            dia_semana_pico = max_indices[0][0]
            hora_pico = heatmap_data.columns[max_indices[1][0]]
            dia_semana_nombre = dias_semana_nombres[dia_semana_pico]
            porcentaje_momento_critico = (max_value / total_accidentes_filtrado) * 100
            
            insight_5 = f"""
            ### üí° Insight 5: Momento Cr√≠tico de Accidentes
            El mayor n√∫mero de accidentes ocurre el **{dia_semana_nombre}** a las **{hora_pico}:00 horas**, con **{int(max_value)} accidentes**, representando un **{porcentaje_momento_critico:.2f}%** del total. Este es el momento m√°s cr√≠tico en t√©rminos de siniestralidad.
            """
            st.markdown(insight_5)
            insights.append(insight_5)
        else:
            st.markdown("### üí° Insight 5: Momento Cr√≠tico de Accidentes\nNo hay suficientes datos para determinar el momento cr√≠tico.")


def crear_grafico_6(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 6: Comparaci√≥n de Accidentes por Carretera a lo Largo del Tiempo"""
    st.header("üìâ 6. Comparaci√≥n de Accidentes por Carretera a lo Largo del Tiempo")
    
    # Filtro para seleccionar m√∫ltiples carreteras para el gr√°fico comparativo
    carreteras_disponibles_grafico = df['carretera_nombre'].unique().tolist()
    carreteras_seleccionadas_default = ['TF-1']  # Carretera por defecto
    
    carreteras_seleccionadas_grafico = st.multiselect(
        "üöß Selecciona una o m√°s Carreteras para Comparar",
        carreteras_disponibles_grafico,
        default=carreteras_seleccionadas_default
    )
    
    # Filtrar el dataframe para las carreteras seleccionadas
    df_filtrado_comparativo = df_filtrado_accidentes[df_filtrado_accidentes['carretera_nombre'].isin(carreteras_seleccionadas_grafico)]
    
    # Agrupaci√≥n y visualizaci√≥n
    accidentes_por_carretera = df_filtrado_comparativo.groupby(['annio', 'carretera_nombre']).size().unstack()
    
    if accidentes_por_carretera.empty or accidentes_por_carretera.shape[1] == 0:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
    else:
        plt.figure(figsize=(14, 8))  # Aumenta el tama√±o de la figura
        accidentes_por_carretera.plot(kind='line', colormap="Blues_r", linewidth=2, marker='o', ax=plt.gca())
    
        # Ajustar la leyenda a la derecha del gr√°fico
        plt.legend(title='Carreteras', bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)
    
        plt.title("üìà Comparaci√≥n de Accidentes a lo Largo del Tiempo")
        plt.xlabel("A√±o")
        plt.ylabel("N√∫mero de Accidentes")
        plt.tight_layout(rect=[0, 0, 0.85, 1])  # Ajustar el espacio para la leyenda
    
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_comparativo_accidentes_carretera.png",
            mime="image/png"
        )
        
        # Tabla con detalles de accidentes por carretera (ahora desplegable)
        with st.expander("üìã Ver detalles de Accidentes por Carretera"):
            accidentes_por_carretera_df = accidentes_por_carretera.reset_index()
            accidentes_por_carretera_df = accidentes_por_carretera_df.melt(id_vars='annio', var_name='Carretera', value_name='N√∫mero de Accidentes')
            accidentes_por_carretera_df['Porcentaje (%)'] = (accidentes_por_carretera_df['N√∫mero de Accidentes'] / total_accidentes_filtrado) * 100
            st.table(accidentes_por_carretera_df.style.format({'Porcentaje (%)': '{:.2f}%'}))
        
        # Insight
        total_accidentes_carreteras = df_filtrado_comparativo['carretera_nombre'].value_counts()
        if not total_accidentes_carreteras.empty:
            carretera_pico = total_accidentes_carreteras.idxmax()
            num_accidentes_carretera = total_accidentes_carreteras.max()
            insight_6 = f"""
            ### üí° Insight 6: Carretera con M√°s Accidentes
            De las carreteras seleccionadas, la **{carretera_pico}** tiene el mayor n√∫mero de accidentes con **{num_accidentes_carretera} accidentes** en el rango seleccionado.
            """
            st.markdown(insight_6)
            insights.append(insight_6)
        else:
            st.markdown("### üí° Insight 6: Carretera con M√°s Accidentes\nNo hay suficientes datos para determinar la carretera con m√°s accidentes.")


def crear_grafico_7(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 7: Distribuci√≥n de Tipos de Incidencias (%)"""
    st.header("üìä 7. Distribuci√≥n de Tipos de Incidencias (%)")
    
    # Calcular el porcentaje de cada tipo de incidencia en el DataFrame filtrado
    tipo_incidencias_porcentaje = df_filtrado['incidencia_tipo'].value_counts(normalize=True) * 100
    
    if tipo_incidencias_porcentaje.empty:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
    else:
        plt.figure(figsize=(12, 8))
        sns.barplot(x=tipo_incidencias_porcentaje.index, y=tipo_incidencias_porcentaje.values, palette="Blues_r")
        plt.title('üìä Distribuci√≥n de Tipos de Incidencias (%)', fontsize=16)
        plt.xlabel('Tipo de Incidencia', fontsize=14)
        plt.ylabel('Porcentaje (%)', fontsize=14)
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_distribucion_tipos_incidencias.png",
            mime="image/png"
        )
        
        # Tabla con detalles de distribuci√≥n de tipos de incidencias (ahora desplegable)
        with st.expander("üìã Ver detalles de Distribuci√≥n de Tipos de Incidencias"):
            distribucion_incidencias_df = df_filtrado['incidencia_tipo'].value_counts().reset_index()
            distribucion_incidencias_df.columns = ['Tipo de Incidencia', 'N√∫mero de Incidencias']
            distribucion_incidencias_df['Porcentaje (%)'] = (distribucion_incidencias_df['N√∫mero de Incidencias'] / df_filtrado.shape[0]) * 100
            st.table(distribucion_incidencias_df.style.format({'Porcentaje (%)': '{:.2f}%'}))   
    
        # Insight
        tipo_mas_frecuente = tipo_incidencias_porcentaje.idxmax()
        porcentaje_mas_frecuente = tipo_incidencias_porcentaje.max()
    
        insight_7 = f"""
        ### üí° Insight 7: Tipo de Incidencia M√°s Com√∫n
        El tipo de incidencia m√°s com√∫n es **{tipo_mas_frecuente}**, representando el **{porcentaje_mas_frecuente:.2f}%** de las incidencias totales. Esto sugiere que las **{tipo_mas_frecuente}s** son un factor significativo en el tr√°fico de la zona.
        """
        st.markdown(insight_7)
        insights.append(insight_7)


def crear_grafico_8(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 8: Top 10 Incidentes por Subtipo"""
    st.header("üè∑Ô∏è 8. Top 10 Incidentes por Subtipo")
    
    # Contar el n√∫mero de incidentes por subtipo en el DataFrame filtrado
    top_incidencias_subtipo = df_filtrado['incidencia_subtipo'].value_counts().head(10)
    
    if top_incidencias_subtipo.empty:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
    else:
        # Crear un DataFrame para facilitar la visualizaci√≥n
        top_incidencias_subtipo_df = top_incidencias_subtipo.reset_index()
        top_incidencias_subtipo_df.columns = ['Subtipo', 'N√∫mero de Incidencias']
    
        plt.figure(figsize=(12, 6))
        sns.barplot(x='N√∫mero de Incidencias', y='Subtipo', data=top_incidencias_subtipo_df, palette="Blues_r")
        plt.title('üè∑Ô∏è Top 10 Incidentes por Subtipo', fontsize=16)
        plt.xlabel('N√∫mero de Incidencias', fontsize=14)
        plt.ylabel('Subtipo', fontsize=14)
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_top_incidencias_subtipo.png",
            mime="image/png"
        )
        
        # Tabla con detalles de Top 10 Incidentes por Subtipo (ahora desplegable)
        with st.expander("üìã Ver detalles de Top 10 Incidentes por Subtipo"):
            top_incidencias_subtipo_display = top_incidencias_subtipo.reset_index()
            top_incidencias_subtipo_display.columns = ['Subtipo', 'N√∫mero de Incidencias']
            top_incidencias_subtipo_display['Porcentaje (%)'] = (top_incidencias_subtipo_display['N√∫mero de Incidencias'] / df_filtrado.shape[0]) * 100
            st.table(top_incidencias_subtipo_display.style.format({'Porcentaje (%)': '{:.2f}%'}))   
        
        # Insight
        subtipo_mas_frecuente = top_incidencias_subtipo.index[0]
        num_incidencias_subtipo = top_incidencias_subtipo.iloc[0]
        porcentaje_subtipo_mas_frecuente = (num_incidencias_subtipo / df_filtrado.shape[0]) * 100
    
        insight_8 = f"""
        ### üí° Insight 8: Subtipo de Incidencia M√°s Com√∫n
        El subtipo m√°s frecuente es **{subtipo_mas_frecuente}**, con **{num_incidencias_subtipo} incidencias**, representando un **{porcentaje_subtipo_mas_frecuente:.2f}%** de las incidencias filtradas. Esto indica que este subtipo es especialmente relevante.
        """
        st.markdown(insight_8)
        insights.append(insight_8)


def crear_grafico_9(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 9: Porcentaje de Accidentes por D√≠a Laboral vs. Fin de Semana"""
    st.header("üìÖ 9. Porcentaje de Accidentes por D√≠a Laboral vs. Fin de Semana")
    
    if df_filtrado_accidentes.empty:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
    else:
        # Crear una copia para evitar SettingWithCopyWarning
        df_filtrado_accidentes_copy = df_filtrado_accidentes.copy()
    
        # Crear una nueva columna que clasifique los d√≠as como "Laboral" o "Fin de Semana"
        df_filtrado_accidentes_copy['tipo_dia'] = df_filtrado_accidentes_copy['dia_semana'].apply(lambda x: 'Fin de Semana' if x >= 5 else 'Laboral')
    
        # Calcular el porcentaje de accidentes por tipo de d√≠a
        porcentaje_accidentes_por_tipo_dia = df_filtrado_accidentes_copy['tipo_dia'].value_counts(normalize=True) * 100
    
        # Crear un DataFrame para visualizar los resultados
        porcentaje_accidentes_df = porcentaje_accidentes_por_tipo_dia.reset_index()
        porcentaje_accidentes_df.columns = ['Tipo de D√≠a', 'Porcentaje (%)']
    
        plt.figure(figsize=(10, 6))
        sns.barplot(x='Tipo de D√≠a', y='Porcentaje (%)', data=porcentaje_accidentes_df, palette="Blues_r")
        plt.title('üìÖ Porcentaje de Accidentes por D√≠a Laboral vs. Fin de Semana', fontsize=16)
        plt.xlabel('Tipo de D√≠a', fontsize=14)
        plt.ylabel('Porcentaje (%)', fontsize=14)
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_porcentaje_accidentes_tipo_dia.png",
            mime="image/png"
        )
    
        # Mostrar el DataFrame con los porcentajes (ahora desplegable)
        with st.expander("üìã Ver detalles de Porcentaje de Accidentes por Tipo de D√≠a"):
            st.table(porcentaje_accidentes_df.style.format({'Porcentaje (%)': '{:.2f}%'}))
        
        # Insight
        tipo_dia_mas_accidentes = porcentaje_accidentes_df.loc[porcentaje_accidentes_df['Porcentaje (%)'].idxmax(), 'Tipo de D√≠a']
        porcentaje_mayor = porcentaje_accidentes_df['Porcentaje (%)'].max()
        num_accidentes_tipo_dia = int((porcentaje_mayor / 100) * total_accidentes_filtrado)
        # Continuaci√≥n del Insight 9
        insight_9 = f"""
        ### üí° Insight 9: D√≠a con M√°s Accidentes
        Los accidentes ocurren m√°s en **{tipo_dia_mas_accidentes}**, con **{num_accidentes_tipo_dia} accidentes**, representando el **{porcentaje_mayor:.2f}%** del total de accidentes. Esto sugiere que los **{tipo_dia_mas_accidentes.lower()}s** tienen una mayor siniestralidad.
        """
        st.markdown(insight_9)
        insights.append(insight_9)


def crear_grafico_10(df_filtrado_accidentes, total_accidentes_filtrado):
    """Gr√°fico 10: N√∫mero de Accidentes por A√±o"""
    st.header("üìÖ 10. N√∫mero de Accidentes por A√±o")
    accidentes_por_annio = df_filtrado_accidentes['annio'].value_counts().sort_index()
    
    if accidentes_por_annio.empty:
        st.write("‚ö†Ô∏è No hay suficientes datos para mostrar el gr√°fico.")
    else:
        plt.figure(figsize=(10, 6))
        sns.barplot(x=accidentes_por_annio.index, y=accidentes_por_annio.values, palette="Blues_r")
        plt.title("üìÖ N√∫mero de Accidentes por A√±o")
        plt.xlabel("A√±o")
        plt.ylabel("N√∫mero de Accidentes")
        plt.grid(True)
        plt.tight_layout()
        st.pyplot(plt)
        
        # Bot√≥n de descarga del gr√°fico
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        st.download_button(
            label="üíæ Descargar gr√°fico",
            data=buf,
            file_name="grafico_accidentes_por_annio.png",
            mime="image/png"
        )
        
        # Tabla con detalles de accidentes por a√±o (ahora desplegable)
        with st.expander("üìã Ver detalles de Accidentes por A√±o"):
            accidentes_por_annio_df = accidentes_por_annio.reset_index()
            accidentes_por_annio_df.columns = ['A√±o', 'N√∫mero de Accidentes']
            accidentes_por_annio_df['Porcentaje (%)'] = (accidentes_por_annio_df['N√∫mero de Accidentes'] / total_accidentes_filtrado) * 100
            st.table(accidentes_por_annio_df.style.format({'Porcentaje (%)': '{:.2f}%'}))
        
        # Insight
        a√±o_pico = accidentes_por_annio_df.loc[accidentes_por_annio_df['N√∫mero de Accidentes'].idxmax(), 'A√±o']
        num_accidentes_a√±o = accidentes_por_annio_df['N√∫mero de Accidentes'].max()
        porcentaje_a√±o_pico = (num_accidentes_a√±o / total_accidentes_filtrado) * 100
        
        insight_10 = f"""
        ### üí° Insight 10: A√±o con M√°s Accidentes
        El a√±o con m√°s accidentes es **{a√±o_pico}**, con **{num_accidentes_a√±o} accidentes**, representando un **{porcentaje_a√±o_pico:.2f}%** del total de accidentes en el rango seleccionado. Esto podr√≠a indicar tendencias o factores espec√≠ficos de ese a√±o.
        """
        st.markdown(insight_10)
        insights.append(insight_10)

# --------------------------- #
#     10. Mapa de Carreteras    #
# --------------------------- #

def crear_mapa_carreteras(carreteras_seleccionadas):
    """Mapa de Carreteras Seleccionadas"""
    st.title('üìç Mapa de Carreteras Seleccionadas')
    
    # Cargar puntos kilom√©tricos desde un archivo GeoJSON (si lo tienes)
    try:
        gdf_puntos = gpd.read_file('puntos-kilometricos.geojson')
    
        # Filtrar los puntos kilom√©tricos por las carreteras seleccionadas
        gdf_puntos_filtrados = gdf_puntos[gdf_puntos['via_nombre'].isin(carreteras_seleccionadas)]
    
        # Crear el mapa
        if not gdf_puntos_filtrados.empty:
            map_center = [gdf_puntos_filtrados['pk_latitud'].mean(), gdf_puntos_filtrados['pk_longitud'].mean()]
            mapa = folium.Map(location=map_center, zoom_start=10)
    
            # A√±adir las l√≠neas conectando los puntos de cada carretera
            for via, group in gdf_puntos_filtrados.groupby('via_nombre'):
                puntos = list(zip(group['pk_latitud'], group['pk_longitud']))
                folium.PolyLine(puntos, color='blue', weight=2.5, opacity=0.7).add_to(mapa)
    
            # Mostrar el mapa interactivo
            folium_static(mapa)
        else:
            st.warning("‚ö†Ô∏è No se encontraron puntos kilom√©tricos para las carreteras seleccionadas.")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è No se pudo cargar el mapa debido a: {e}")

# --------------------------- #
#     11. Ejecuci√≥n de Gr√°ficos #
# --------------------------- #

# Mostrar el mapa de carreteras seleccionadas
crear_mapa_carreteras(carreteras_seleccionadas)

# Total de accidentes filtrados
total_accidentes_filtrado = df_filtrado_accidentes.shape[0]

# Crear y mostrar cada gr√°fico
crear_grafico_1(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_2(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_3(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_4(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_5(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_6(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_7(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_8(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_9(df_filtrado_accidentes, total_accidentes_filtrado)
crear_grafico_10(df_filtrado_accidentes, total_accidentes_filtrado)

# --------------------------- #
#   12. Modelado y Predicci√≥n  #
# --------------------------- #


# Definir los d√≠as de la semana manualmente en espa√±ol
dias_semana_esp = ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes', 's√°bado', 'domingo']

# Preprocesamiento de datos para el modelo
def preprocess_data(df):
    df_model = df.copy()
    df_model['hora'] = df_model['incidencia_fecha_inicio'].dt.hour
    df_model['dia_semana'] = df_model['incidencia_fecha_inicio'].dt.dayofweek
    df_model['es_accidente'] = df_model['es_accidente'].apply(lambda x: 1 if x == 'Accidente' else 0)

    # Codificar variables categ√≥ricas
    le_carretera = LabelEncoder()
    le_tramo = LabelEncoder()
    df_model['carretera_nombre_encoded'] = le_carretera.fit_transform(df_model['carretera_nombre'])
    df_model['tramo_nombre_encoded'] = le_tramo.fit_transform(df_model['tramo_nombre'])
    
    # Retornar los objetos necesarios
    return df_model, le_carretera, le_tramo

# Llamada a la funci√≥n para preprocesar los datos y obtener las variables codificadas
df_model, le_carretera, le_tramo = preprocess_data(df)




# Seleccionar caracter√≠sticas y etiqueta
X = df_model[['carretera_nombre_encoded', 'tramo_nombre_encoded', 'hora', 'dia_semana']]
y = df_model['es_accidente']

# Dividir datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Entrenar un modelo de clasificaci√≥n
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predecir en el conjunto de prueba
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)


# Predicci√≥n de accidente seg√∫n los filtros seleccionados por el usuario
st.header("üîÆ Predicci√≥n de Accidente")

# Obtener la hora y el d√≠a actual con minutos en formato espa√±ol
hora_actual = datetime.now().strftime('%H:%M')
dia_semana_actual = dias_semana_esp[datetime.now().weekday()]  # Obtener el d√≠a en espa√±ol de la lista

# Filtros para la predicci√≥n
carretera_seleccionada = st.selectbox("üõ£Ô∏è Selecciona una Carretera", df['carretera_nombre'].unique())
tramos_disponibles = ['Seleccionar Todos'] + df[df['carretera_nombre'] == carretera_seleccionada]['tramo_nombre'].unique().tolist()
tramo_seleccionado = st.selectbox("üìç Selecciona un Tramo", tramos_disponibles)


# Verificar si se seleccion√≥ "Seleccionar Todos" para tramos
if tramo_seleccionado == 'Seleccionar Todos':
    tramos_seleccionados = df[df['carretera_nombre'] == carretera_seleccionada]['tramo_nombre'].unique().tolist()
    tramos_encoded = le_tramo.transform(tramos_seleccionados)  # Codificamos todos los tramos
else:
    tramos_encoded = [le_tramo.transform([tramo_seleccionado])[0]]  # Codificamos solo el tramo seleccionado

# Codificar la carretera seleccionada
carreteras_encoded = le_carretera.transform([carretera_seleccionada])[0]

# Crear el dataframe de entrada con las variables actuales
input_data = pd.DataFrame({
    'carretera_nombre_encoded': np.repeat(carreteras_encoded, len(tramos_encoded)),
    'tramo_nombre_encoded': tramos_encoded,
    'hora': np.repeat(datetime.now().hour, len(tramos_encoded)),
    'dia_semana': np.repeat(datetime.now().weekday(), len(tramos_encoded)),
    
})

# Hacer la predicci√≥n
pred_probs = model.predict_proba(input_data)[:, 1]  # Probabilidad de accidente

# Calcular la probabilidad promedio de accidente
avg_pred_prob = pred_probs.mean()

# Mostrar resultados en la app
st.write(f"üîÆ **Probabilidad promedio de que ocurra un accidente**: {avg_pred_prob:.2%}")

# Explicaci√≥n de los c√°lculos
st.markdown("""
**üîç Explicaci√≥n de los C√°lculos**: Este valor es la probabilidad calculada de accidente usando los datos actuales (hora, d√≠a de la semana, tramo y tr√°fico). Refleja el riesgo general, pero no implica que siempre ocurra un accidente.
""")

# Explicaci√≥n de la precisi√≥n del modelo
st.markdown(f"""
**üéØ Precisi√≥n del Modelo**:
La precisi√≥n muestra qu√© tan bien el modelo est√° funcionando en t√©rminos de clasificar correctamente los accidentes. Un valor de **{accuracy:.2f}** indica que el {accuracy*100:.0f}% de las veces, el modelo predijo correctamente si hubo o no un accidente.
""")
# Explicaci√≥n precision modelo 2
st.markdown(f"""
**üéØ Explicaci√≥n de la precisi√≥n del modelo**: 
Es importante tener en cuenta que la precisi√≥n de las predicciones del modelo puede verse afectada en ciertos tramos o carreteras debido a la falta de datos hist√≥ricos suficientes. En estos casos, el modelo puede no tener la informaci√≥n necesaria para identificar patrones de accidentes y, como resultado, puede proporcionar probabilidades de accidente que sean muy bajas o incluso del **0%**.
""")

# Bar√≥metro de Predicci√≥n utilizando Plotly
def crear_barometro(avg_pred_prob, hora_actual, dia_semana_actual):
    """Bar√≥metro de Predicci√≥n utilizando Plotly"""
    st.header("üìà Bar√≥metro de Predicci√≥n")

    # Mostrar la hora y el d√≠a actual encima del bar√≥metro
    st.subheader(f"üïí Hora actual: {hora_actual} | üìÖ D√≠a: {dia_semana_actual}")

    fig = go.Figure(go.Indicator(
        mode = "gauge+number",
        value = avg_pred_prob * 100,  # Convertir a porcentaje
        title = {'text': "Probabilidad de Accidente"},
        gauge = {
            'axis': {'range': [0, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
            'bar': {'color': "black"},
            'steps': [
                {'range': [0, 33], 'color': "green"},
                {'range': [33, 66], 'color': "orange"},
                {'range': [66, 100], 'color': "red"}
            ],
            'threshold': {
                'line': {'color': "black", 'width': 4},
                'thickness': 0.75,
                'value': avg_pred_prob * 100
            }
        }
    ))
    
    # Mostrar la figura en la aplicaci√≥n Streamlit
    st.plotly_chart(fig)
    
    # Explicaci√≥n adicional
    st.markdown("""
    **üîç Explicaci√≥n del Bar√≥metro:**
    - **Verde (0-33%)**: Baja probabilidad de accidente.
    - **Naranja (33-66%)**: Probabilidad moderada de accidente.
    - **Rojo (66-100%)**: Alta probabilidad de accidente.
    
    Este bar√≥metro refleja el riesgo general basado en los filtros seleccionados. Un valor m√°s alto indica una mayor probabilidad de que ocurra un accidente bajo las condiciones actuales.
    """)

# Llamar a la funci√≥n para crear el bar√≥metro
crear_barometro(avg_pred_prob, hora_actual, dia_semana_actual)

#---
# Obtener las importancias de las caracter√≠sticas
importancias = model.feature_importances_

# Nombres de las caracter√≠sticas
caracteristicas = ['carretera_nombre_encoded', 'tramo_nombre_encoded', 'hora', 'dia_semana']

# Crear un DataFrame con las importancias, multiplic√°ndolas por 100 para convertirlas a porcentajes
df_importancias = pd.DataFrame({
    'Caracter√≠stica': caracteristicas,
    'Importancia (%)': importancias * 100  # Convertir a porcentaje
})

# Ordenar por importancia
df_importancias = df_importancias.sort_values(by='Importancia (%)', ascending=False)

# Mostrar la tabla de importancias en Streamlit
st.subheader("Importancia de las Caracter√≠sticas en el Modelo (%)")
st.dataframe(df_importancias)
